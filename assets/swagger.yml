swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Inventory management"
  termsOfService: "http://swagger.io/terms/"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "inventory"
- name: "location"
- name: "itemType"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /inventory:
    post:
      tags:
      - "inventory"
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - in: body
          name: inventory
          schema:
            $ref: "#/definitions/InventoryInput" 
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Inventory"
        422:
          description: "Unprocessable Entity"
        503:
          description: "Service Unavailable"     
  /inventory/{id}:
    get:
      tags:
      - "inventory"
      produces:
        - "application/json"
      parameters:
      - in: "path"
        name: id
        type: string
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Inventory"
        422:
          description: "Unprocessable Entity"
        503:
          description: "Service Unavailable"
    delete:
      tags:
      - "inventory"  
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: id
        type: string
        required: true
      responses:
        200:
          description: "successful operation"
        422:
          description: "Unprocessable Entity"
        503:
          description: "Service Unavailable"
    put:
      tags:
      - "inventory"
      produces:
        - "application/json"
      parameters:
      - in: "path"
        name: id
        type: string
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Inventory"
        422:
          description: "Unprocessable Entity"
        503:
          description: "Service Unavailable"          
  /location:
    get:
      tags:
      - "location"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Location"
        503:
          description: "Service Unavailable"
    post:
      tags:
      - "location"  
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
        - in: body
          name: location
          schema:
            $ref: "#/definitions/LocationInput"  
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Location"
        422:
          description: "Unprocessable Entity"
        503:
          description: "Service Unavailable"
  /location/{id}:
    get:
      tags:
      - "location"  
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: id
        type: string
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Location"
        422:
          description: "Unprocessable Entity"
        503:
          description: "Service Unavailable"
    put:
      tags:
      - "location"  
      produces:
      - "application/json"
      parameters:
        - in: "path"
          name: id
          type: string
          required: true
        - in: body
          name: location
          schema:
            $ref: "#/definitions/LocationInput"  
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Location"
        422:
          description: "Unprocessable Entity"
        503:
          description: "Service Unavailable"
    delete:
      tags:
      - "location"  
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: id
        type: string
        required: true
      responses:
        200:
          description: "successful operation"
        422:
          description: "Unprocessable Entity"
        503:
          description: "Service Unavailable"
  /location/{locationId}/inventory:
    get:
      tags:
      - "location"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: locationId
        type: string
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Inventory"
        422:
          description: "Unprocessable Entity"
        503:
          description: "Service Unavailable"
definitions:
  Inventory:
    type: "object"
    properties:
      id:
        type: "string"
      itemType:
        type: "string"
      location:
        type: "string"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "STOCK"
        - "IN_USE"
        - "REPAIR"
  InventoryInput:
    type: "object"
    properties:
      itemType:
        type: "string"
      location:
        type: "string"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "STOCK"
        - "IN_USE"
        - "REPAIR"
  Location:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
  LocationInput:
    type: "object"
    properties:
      name:
        type: "string"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  ItemType:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "string"
      name:
        type: "string"
        example: "doggie"
      description:
        type: "string"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"